{"version":3,"sources":["constants/ThemeConstants.js","contexts/ThemeContext.js","components/SearchBox.js","containers/FilterContainer.js","actions/filterAction.js","constants/ActionTypes.js","components/Header.js","components/NavBar.js","constants/DefaultStates.js","components/ColorPicker.js","components/Note.js","components/Notes.js","utils/apiCaller.js","actions/noteAction.js","containers/NotesContainer.js","containers/ArchivedNotesContainer.js","components/NewNote.js","components/MainDisplay.js","containers/MainDisplayContainer.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/noteReducer.js","reducers/filterReducer.js","store/initialState.js","store/index.js","index.js"],"names":["DARK_THEME","LIGHT_COLORS","DARK_COLORS","ThemeContext","React","createContext","theme","toggleTheme","SearchBox","updateFilter","value","searchInput","useRef","useState","filterValue","setFilterValue","handleFilterChange","e","currentTarget","useEffect","localforage","getItem","then","res","setItem","Consumer","className","onClick","current","focus","ref","placeholder","type","onChange","connect","notes","filter","note","title","toLowerCase","includes","noteTitleFilter","body","dispatch","text","props","style","width","Header","setNavbarCollapse","MAIN_LIST","icon","NavBar","isNavbarCollapased","selctedIndex","setSelectedIndex","renderListItem","map","index","key","backgroundColor","height","DEFAULT_STATE","image","isArchived","isStarred","ColorPicker","colors","selectedIndex","handleBackgroundColor","setColorPickerVisibility","position","onMouseEnter","onMouseLeave","color","opacity","stopPropagation","alignSelf","Note","onRemove","onArchive","onStar","onUpdate","setModalVisibility","setSelectedNote","dimensions","colorIndex","indexOf","showActions","setShowActions","colorPickerVisibility","noteRef","gridRowEnd","setGridRowEnd","rowSpan","Math","ceil","querySelector","getBoundingClientRect","rowGap","rowHeight","onNoteSelect","handleArchive","handleRemove","handleStar","updatedNote","onMouseOver","alt","src","onMouseOut","Notes","selectedNote","modalVisibility","tagVisibility","setTagVisibility","setDimensions","contentInput","gridNote","autosize","resizeGridItem","item","length","parseInt","window","getComputedStyle","getPropertyValue","onNoteChange","name","marginBottom","id","marginTop","rows","getAll","a","async","newNote","Date","now","addNewNote","API","updateNote","getState","starNote","toggleNote","removeNote","NewNote","isFocussed","setFocus","noteState","setNoteState","onSave","imageInputVisibility","setImageInputVisibility","handleChange","target","handleAttachPicture","handleClearImage","display","flex","MainDisplay","ArchivedNotesContainer","renderContainer","bindActionCreators","App","setState","innerWidth","state","this","Provider","Component","Boolean","location","hostname","match","combineReducers","action","middlewares","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","initialState","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bc5d8a9.chunk.js","sourcesContent":["export const LIGHT_THEME = 'LIGHT_THEME';\nexport const DARK_THEME = 'DARK_THEME';\n\nexport const LIGHT_COLOR = '#ececec';\n\nexport const LIGHT_COLORS = [\n  '#ececec',\n  '#880e4f',\n  '#4a148c',\n  '#1a237e',\n  '#1b5e20',\n  '#bf360c'\n];\n\nexport const DARK_COLORS = [\n  '#282c34',\n  '#880e4f',\n  '#4a148c',\n  '#1a237e',\n  '#1b5e20',\n  '#bf360c'\n];\n","import React from 'react';\nimport { LIGHT_THEME } from '../constants/ThemeConstants';\n\nconst ThemeContext = React.createContext({\n  theme: LIGHT_THEME,\n  toggleTheme: () => {}\n});\n\nexport default ThemeContext;\n","import React, { useRef, useEffect, useState } from 'react';\nimport localforage from 'localforage';\nimport './SearchBox.css';\nimport ThemeContext from '../contexts/ThemeContext';\nimport { DARK_THEME } from '../constants/ThemeConstants';\n\nconst SearchBox = ({ updateFilter, value }) => {\n  const searchInput = useRef(null);\n  const [filterValue, setFilterValue] = useState(value);\n\n  const handleFilterChange = e => {\n    setFilterValue(e.currentTarget.value);\n  };\n\n  useEffect(() => {\n    localforage.getItem('filter', filterValue).then(res => {\n      if (res) {\n        setFilterValue(res);\n        updateFilter(res);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    updateFilter(filterValue);\n    localforage.setItem('filter', filterValue);\n  }, [filterValue, updateFilter]);\n\n  return (\n    <ThemeContext.Consumer>\n      {({ theme }) => (\n        <div\n          className={\n            theme === DARK_THEME\n              ? 'search-component search-component-dark'\n              : 'search-component search-component-light'\n          }\n        >\n          <i\n            className={\n              theme === DARK_THEME\n                ? 'icon material-icons search-icon'\n                : 'icon icon-light material-icons search-icon'\n            }\n            onClick={() => searchInput.current.focus()}\n          >\n            search\n          </i>\n          <input\n            ref={searchInput}\n            placeholder=\"Search\"\n            className={\n              theme === DARK_THEME\n                ? 'search-input'\n                : 'search-input search-input-light'\n            }\n            type=\"text\"\n            onChange={handleFilterChange}\n            value={filterValue}\n          />\n          <i\n            className={\n              theme === DARK_THEME\n                ? 'icon material-icons search-icon'\n                : 'icon icon-light material-icons search-icon'\n            }\n            onClick={() => {\n              updateFilter('');\n              setFilterValue('');\n            }}\n          >\n            close\n          </i>\n        </div>\n      )}\n    </ThemeContext.Consumer>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport SearchBox from '../components/SearchBox';\n\nimport { updateNoteTitleFilter } from '../actions/filterAction';\n\nconst FilterContainer = props => {\n  return (\n    <div style={{ width: '80%' }}>\n      <SearchBox {...props} />\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ notes, filter }) => {\n  return {\n    notes: notes.filter(\n      note =>\n        note.title.toLowerCase().includes(filter.noteTitleFilter) ||\n        note.body.toLowerCase().includes(filter.noteTitleFilter)\n    ),\n    value: filter.noteTitleFilter\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateFilter(value) {\n    dispatch(updateNoteTitleFilter(value));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterContainer);\n","import { UPDATE_NOTE_TITLE_FILTER } from '../constants/ActionTypes';\n\nexport const updateNoteTitleFilter = text => ({\n  type: UPDATE_NOTE_TITLE_FILTER,\n  text\n});\n","export const UPDATE_NOTE_TITLE_FILTER = 'UPDATE_NOTE_TITLE_FILTER';\n\nexport const UPDATE_NEW_NOTE_VALUE = 'UPDATE_NEW_NOTE_VALUE';\n\nexport const ADD_NEW_NOTE = 'ADD_NEW_NOTE';\nexport const UPDATE_NOTE = 'UPDATE_NOTE';\nexport const REMOVE_NOTE = 'REMOVE_NOTE';\nexport const TOGGLE_NOTE = 'TOGGLE_NOTE';\nexport const UPDATE_ALL_AS_ARCHIVE = 'UPDATE_ALL_AS_ARCHIVE';\nexport const UPDATE_ALL_AS_UNARCHIVE = 'UPDATE_ALL_AS_UNARCHIVE';\n\nexport const UPDATE_ALL_NOTES = 'UPDATE_ALL_NOTES';\n","import React from 'react';\nimport './Header.css';\nimport FilterContainer from '../containers/FilterContainer';\nimport ThemeContext from '../contexts/ThemeContext';\nimport { DARK_THEME } from '../constants/ThemeConstants';\n\nfunction Header({ setNavbarCollapse }) {\n  return (\n    <ThemeContext.Consumer>\n      {({ toggleTheme, theme }) => (\n        <header className=\"header\">\n          <div className=\"navbar-icon\">\n            <div\n              className={theme === DARK_THEME ? 'icon' : 'icon icon-light'}\n              onClick={setNavbarCollapse}\n            >\n              <i className=\"material-icons hamburger\">menu</i>\n            </div>\n            <div className=\"icon-title\">Google Keep</div>\n          </div>\n          <div className=\"search-box\">\n            <FilterContainer />\n          </div>\n          <div className=\"action-area\">\n            <div\n              className={theme === DARK_THEME ? 'icon' : 'icon icon-light'}\n              onClick={toggleTheme}\n            >\n              <i className=\"material-icons hamburger\">\n                {theme === DARK_THEME ? 'wb_sunny' : 'brightness_2'}\n              </i>\n            </div>\n          </div>\n        </header>\n      )}\n    </ThemeContext.Consumer>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport './NavBar.css';\nimport { LIGHT_THEME } from '../constants/ThemeConstants';\n\nconst MAIN_LIST = [\n  {\n    title: 'Notes',\n    icon: 'note'\n  },\n  {\n    title: 'Archive',\n    icon: 'archive'\n  }\n];\n\nconst NavBar = ({\n  isNavbarCollapased,\n  selctedIndex,\n  setSelectedIndex,\n  theme\n}) => {\n  const renderListItem = MAIN_LIST.map(({ icon, title }, index) => {\n    return (\n      <div\n        key={title}\n        className={\n          selctedIndex === index ? 'list-item list-item-active' : 'list-item'\n        }\n        onClick={() => setSelectedIndex(index)}\n      >\n        <i className=\"material-icons list-icon\">{icon}</i>\n        <div className=\"list-title\">{title}</div>\n      </div>\n    );\n  });\n\n  let className = '';\n  if (isNavbarCollapased) {\n    className = 'navbar navbar-hidden';\n  } else {\n    className = 'navbar';\n  }\n\n  if (theme === LIGHT_THEME) {\n    className += ' navbar-light';\n  }\n\n  return (\n    <nav className={className}>\n      {renderListItem}\n      <div style={{ backgroundColor: '#BBB', height: '1px' }}></div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","export const DEFAULT_STATE = {\n  title: '',\n  body: '',\n  image: '',\n  backgroundColor: '',\n  isArchived: false,\n  isStarred: false\n};\n","import React from 'react';\nimport './ColorPicker.css';\n\nconst ColorPicker = ({\n  colors,\n  selectedIndex,\n  handleBackgroundColor,\n  setColorPickerVisibility,\n  position\n}) => {\n  return (\n    <div\n      className=\"color-container\"\n      style={{\n        [position.key]: position.value\n      }}\n      onMouseEnter={() => setColorPickerVisibility(true)}\n      onMouseLeave={() => setColorPickerVisibility(false)}\n    >\n      {colors.map((color, index) => (\n        <div\n          key={color}\n          className=\"color\"\n          style={{\n            backgroundColor: `${color}`,\n            opacity: index === selectedIndex ? 0.4 : 1\n          }}\n          onClick={e => {\n            e.stopPropagation();\n            handleBackgroundColor(index, color);\n          }}\n        >\n          {index === selectedIndex && (\n            <i style={{ alignSelf: 'center' }} className=\"material-icons\">\n              check\n            </i>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ColorPicker;\n","import React, { useState, useRef, useEffect } from 'react';\nimport './Note.css';\nimport ThemeContext from '../contexts/ThemeContext';\nimport {\n  DARK_THEME,\n  LIGHT_THEME,\n  DARK_COLORS,\n  LIGHT_COLORS\n} from '../constants/ThemeConstants';\nimport ColorPicker from './ColorPicker';\n\nconst Note = ({\n  note,\n  onRemove,\n  onArchive,\n  onStar,\n  onUpdate,\n  setModalVisibility,\n  setSelectedNote,\n  dimensions\n}) => {\n  const colorIndex = DARK_COLORS.indexOf(note.backgroundColor);\n  const [showActions, setShowActions] = useState(false);\n  const [colorPickerVisibility, setColorPickerVisibility] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(\n    colorIndex === -1 ? 0 : colorIndex\n  );\n  const noteRef = useRef(null);\n  const [gridRowEnd, setGridRowEnd] = useState(1);\n\n  useEffect(() => {\n    let rowSpan = Math.ceil(\n      (noteRef.current.querySelector('.note-inner').getBoundingClientRect()\n        .height +\n        dimensions.rowGap) /\n        (dimensions.rowHeight + dimensions.rowGap)\n    );\n    setGridRowEnd(rowSpan);\n  }, [dimensions]);\n\n  const onNoteSelect = e => {\n    e.stopPropagation();\n    setModalVisibility(true);\n    setSelectedNote(note);\n  };\n\n  const handleArchive = e => {\n    e.stopPropagation();\n    onArchive(note);\n  };\n\n  const handleRemove = e => {\n    e.stopPropagation();\n    onRemove(note);\n  };\n\n  const handleStar = e => {\n    e.stopPropagation();\n    onStar(note);\n  };\n\n  const handleBackgroundColor = (index, color) => {\n    setSelectedIndex(index);\n    let updatedNote = {\n      ...note,\n      backgroundColor: color\n    };\n    onUpdate(updatedNote);\n  };\n\n  return (\n    <ThemeContext.Consumer>\n      {({ theme }) => (\n        <div ref={noteRef} style={{ gridRowEnd: `span ${gridRowEnd}` }}>\n          <div\n            className=\"note-inner\"\n            onMouseOver={() => setShowActions(true)}\n            onMouseEnter={() => setShowActions(true)}\n            onMouseLeave={() => setShowActions(false)}\n            onClick={onNoteSelect}\n            style={{\n              position: 'relative',\n              backgroundColor: `${note.backgroundColor}`,\n              color:\n                theme === LIGHT_THEME && note.backgroundColor === ''\n                  ? '#000000'\n                  : '#eeeeee'\n            }}\n          >\n            {colorPickerVisibility && (\n              <ColorPicker\n                colors={theme === DARK_THEME ? DARK_COLORS : LIGHT_COLORS}\n                selectedIndex={selectedIndex}\n                handleBackgroundColor={handleBackgroundColor}\n                setColorPickerVisibility={setColorPickerVisibility}\n                position={{ key: 'right', value: '16px' }}\n              />\n            )}\n            {showActions && (\n              <div\n                className={\n                  theme === DARK_THEME\n                    ? 'star-icon-action icon'\n                    : 'star-icon-action icon icon-light'\n                }\n                onClick={handleStar}\n              >\n                <i className=\"material-icons md-18\">\n                  {note.isStarred ? 'star' : 'star_border'}\n                </i>\n              </div>\n            )}\n            <div className=\"note-title\">{note.title}</div>\n            <div className=\"note-content\">{note.body}</div>\n            {note.image !== '' && (\n              <div className=\"note-image-container\">\n                <img\n                  className=\"note-image\"\n                  alt=\"invalid_img_url\"\n                  src={note.image}\n                />\n              </div>\n            )}\n            <div className=\"note-actions\">\n              {showActions && (\n                <div\n                  className={\n                    theme === DARK_THEME\n                      ? 'note-action icon'\n                      : 'note-action icon icon-light'\n                  }\n                  onClick={handleArchive}\n                >\n                  <i\n                    className={\n                      note.isArchived\n                        ? 'material-icons md-18'\n                        : 'material-icons-outlined  md-18'\n                    }\n                  >\n                    archive\n                  </i>\n                </div>\n              )}\n              {showActions && (\n                <div\n                  className={\n                    theme === DARK_THEME\n                      ? 'note-action icon'\n                      : 'note-action icon icon-light'\n                  }\n                >\n                  <i className=\"material-icons md-18\">add_photo_alternate</i>\n                </div>\n              )}\n              {showActions && (\n                <div\n                  className={\n                    theme === DARK_THEME\n                      ? 'note-action icon'\n                      : 'note-action icon icon-light'\n                  }\n                  onMouseOver={() => setColorPickerVisibility(true)}\n                  onMouseOut={() => setColorPickerVisibility(false)}\n                >\n                  <i className=\"material-icons md-18\">color_lens</i>\n                </div>\n              )}\n              {showActions && (\n                <div\n                  className={\n                    theme === DARK_THEME\n                      ? 'note-action icon'\n                      : 'note-action icon icon-light'\n                  }\n                  onClick={handleRemove}\n                >\n                  <i className=\"material-icons md-18\">delete</i>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </ThemeContext.Consumer>\n  );\n};\n\nexport default Note;\n","import React, { useState, useRef, useEffect } from 'react';\nimport autosize from 'autosize';\nimport localforage from 'localforage';\nimport { DEFAULT_STATE } from '../constants/DefaultStates';\nimport { DARK_THEME } from '../constants/ThemeConstants';\nimport Note from './Note';\nimport ThemeContext from '../contexts/ThemeContext';\n\nconst Notes = ({ notes, onRemove, onArchive, onUpdate, onStar }) => {\n  const [selectedNote, setSelectedNote] = useState(DEFAULT_STATE);\n  const [modalVisibility, setModalVisibility] = useState(false);\n  const [tagVisibility, setTagVisibility] = useState(false);\n  const [dimensions, setDimensions] = useState({ rowHeight: 0, rowGap: 0 });\n  const contentInput = useRef(null);\n  const gridNote = useRef(null);\n\n  useEffect(() => {\n    contentInput.current.focus();\n    autosize(contentInput.current);\n    localforage.getItem('selectionInfo').then(res => {\n      if (res && res.modalVisibility && res.selectedNote) {\n        setModalVisibility(true);\n        setSelectedNote(res.selectedNote);\n      }\n    });\n    resizeGridItem();\n  }, []);\n\n  useEffect(() => {\n    localforage.setItem('selectionInfo', { modalVisibility, selectedNote });\n  }, [modalVisibility, selectedNote]);\n\n  useEffect(() => {\n    if (\n      notes.filter(item => item.isStarred).length > 0 &&\n      notes.filter(item => !item.isStarred).length > 0\n    ) {\n      setTagVisibility(true);\n    } else {\n      setTagVisibility(false);\n    }\n  }, [notes]);\n\n  const resizeGridItem = () => {\n    const rowHeight = parseInt(\n      window\n        .getComputedStyle(gridNote.current)\n        .getPropertyValue('grid-auto-rows')\n    );\n    const rowGap = parseInt(\n      window.getComputedStyle(gridNote.current).getPropertyValue('grid-row-gap')\n    );\n    setDimensions({ rowGap, rowHeight });\n  };\n\n  const onNoteChange = e => {\n    let note = {\n      ...selectedNote,\n      [e.currentTarget.name]: e.currentTarget.value\n    };\n    setSelectedNote(note);\n    onUpdate(note);\n  };\n\n  return (\n    <ThemeContext.Consumer>\n      {({ theme }) => (\n        <div>\n          {tagVisibility && (\n            <div style={{ marginBottom: '8px' }} className=\"note-tag\">\n              STARRED\n            </div>\n          )}\n          <div className=\"notes-grid\">\n            {notes\n              .filter(item => item.isStarred)\n              .map(item => {\n                return (\n                  <Note\n                    dimensions={dimensions}\n                    key={item.id}\n                    note={item}\n                    onRemove={onRemove}\n                    onArchive={onArchive}\n                    onStar={onStar}\n                    onUpdate={onUpdate}\n                    setModalVisibility={setModalVisibility}\n                    setSelectedNote={setSelectedNote}\n                  />\n                );\n              })}\n            {modalVisibility}\n          </div>\n          {tagVisibility && (\n            <div\n              style={{ marginTop: '16px', marginBottom: '8px' }}\n              className=\"note-tag\"\n            >\n              OTHERS\n            </div>\n          )}\n          <div ref={gridNote} className=\"notes-grid\">\n            {notes\n              .filter(item => !item.isStarred)\n              .map(item => {\n                return (\n                  <Note\n                    dimensions={dimensions}\n                    key={item.id}\n                    note={item}\n                    onRemove={onRemove}\n                    onArchive={onArchive}\n                    onStar={onStar}\n                    onUpdate={onUpdate}\n                    setModalVisibility={setModalVisibility}\n                    setSelectedNote={setSelectedNote}\n                  />\n                );\n              })}\n            {modalVisibility}\n          </div>\n          <div className={modalVisibility ? 'modale opened' : 'modale'}>\n            <div\n              className={\n                theme === DARK_THEME\n                  ? 'modal-dialog'\n                  : 'modal-dialog modal-dialog-light'\n              }\n            >\n              <div className=\"modal-content\">\n                <input\n                  onChange={onNoteChange}\n                  value={selectedNote.title}\n                  className={\n                    theme === DARK_THEME\n                      ? 'note-title-input'\n                      : 'note-title-input note-title-input-light'\n                  }\n                  type=\"text\"\n                  name=\"title\"\n                  placeholder=\"Title\"\n                />\n                <textarea\n                  onChange={onNoteChange}\n                  value={selectedNote.body}\n                  name=\"body\"\n                  ref={contentInput}\n                  rows={1}\n                  className={\n                    theme === DARK_THEME\n                      ? 'note-content-input'\n                      : 'note-content-input note-content-input-light'\n                  }\n                  type=\"text\"\n                  placeholder=\"Take a note...\"\n                ></textarea>\n                <input\n                  onChange={onNoteChange}\n                  value={selectedNote.image}\n                  className={\n                    theme === DARK_THEME\n                      ? 'note-title-input'\n                      : 'note-title-input note-title-input-light'\n                  }\n                  type=\"text\"\n                  name=\"image\"\n                  placeholder=\"Paste your image url here\"\n                />\n                <button\n                  className={\n                    theme === DARK_THEME\n                      ? 'modal-btn note-btn'\n                      : 'modal-btn note-btn note-btn-light'\n                  }\n                  onClick={() => setModalVisibility(false)}\n                >\n                  Close\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </ThemeContext.Consumer>\n  );\n};\n\nexport default Notes;\n","import localforage from 'localforage';\n\nwindow.localforage = localforage;\n\nconst getAll = async () => {\n  const notes = await localforage.getItem('notes');\n  if (!notes) await localforage.setItem('notes', []);\n  return notes || [];\n};\n\nexport default {\n  async add(note) {\n    const notes = await getAll();\n    const newNote = { ...note, id: Date.now() };\n    localforage.setItem('notes', [...notes, newNote]);\n    return newNote;\n  },\n\n  async getAll() {\n    return await getAll();\n  },\n\n  async delete({ id }) {\n    const notes = await getAll();\n    localforage.setItem(\n      'notes',\n      notes.filter(note => note.id !== id)\n    );\n  },\n\n  async update(updatedNote) {\n    const notes = await getAll();\n    localforage.setItem(\n      'notes',\n      notes.map(note => {\n        if (note.id === updatedNote.id) return { ...note, ...updatedNote };\n        return note;\n      })\n    );\n  },\n\n  async updateAllAsArchive() {\n    const notes = await getAll();\n    localforage.setItem(\n      'notes',\n      notes.map(note => ({ ...note, isArchived: false }))\n    );\n  },\n\n  async deleteArchivedNotes() {\n    const notes = await getAll();\n    localforage.setItem(\n      'notes',\n      notes.filter(({ isArchived }) => isArchived)\n    );\n  }\n};\n","import {\n  UPDATE_ALL_NOTES,\n  ADD_NEW_NOTE,\n  UPDATE_NOTE,\n  REMOVE_NOTE,\n  TOGGLE_NOTE,\n  UPDATE_ALL_AS_ARCHIVE\n} from '../constants/ActionTypes';\n\nimport API from '../utils/apiCaller';\n\nexport const getAllNotes = () => {\n  return dispatch => {\n    API.getAll().then(notes => {\n      dispatch({\n        type: UPDATE_ALL_NOTES,\n        notes\n      });\n    });\n  };\n};\n\nexport const addNewNote = (\n  title,\n  body,\n  image = '',\n  backgroundColor = '',\n  isStarred = false,\n  isArchived = false\n) => {\n  const note = {\n    isStarred,\n    isArchived,\n    title,\n    body,\n    image,\n    backgroundColor\n  };\n\n  return dispatch => {\n    API.add(note).then(note => {\n      dispatch({\n        type: ADD_NEW_NOTE,\n        note\n      });\n    });\n  };\n};\n\nexport const updateNote = note => {\n  return (dispatch, getState) => {\n    API.update(note).then(() => {\n      dispatch({\n        type: UPDATE_NOTE,\n        note\n      });\n    });\n  };\n};\n\nexport const starNote = note => {\n  const updatedNote = { ...note, isStarred: !note.isStarred };\n  return (dispatch, getState) => {\n    API.update(updatedNote).then(() => {\n      dispatch({\n        type: TOGGLE_NOTE,\n        note: updatedNote\n      });\n    });\n  };\n};\n\nexport const toggleNote = note => {\n  const updatedNote = { ...note, isArchived: !note.isArchived };\n  return (dispatch, getState) => {\n    API.update(updatedNote).then(() => {\n      dispatch({\n        type: TOGGLE_NOTE,\n        note: updatedNote\n      });\n    });\n  };\n};\n\nexport const removeNote = note => {\n  return dispatch => {\n    API.delete(note).then(() => {\n      dispatch({\n        type: REMOVE_NOTE,\n        id: note.id\n      });\n    });\n  };\n};\n\nexport const updateAllAsArchive = () => {\n  return dispatch => {\n    API.updateAllAsArchive().then(() => {\n      dispatch({\n        type: UPDATE_ALL_AS_ARCHIVE\n      });\n    });\n  };\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Notes from '../components/Notes';\n\nimport {\n  toggleNote,\n  removeNote,\n  updateNote,\n  starNote\n} from '../actions/noteAction';\n\nconst NotesContainer = ({ notes, onRemove, onArchive, onUpdate, onStar }) => {\n  return (\n    <Notes\n      notes={notes}\n      onRemove={onRemove}\n      onArchive={onArchive}\n      onUpdate={onUpdate}\n      onStar={onStar}\n    />\n  );\n};\n\nconst mapStateToProps = ({ notes, filter }) => {\n  return {\n    notes: notes.filter(\n      note =>\n        !note.isArchived &&\n        (note.title\n          .toLowerCase()\n          .includes(filter.noteTitleFilter.toLowerCase()) ||\n          note.body\n            .toLowerCase()\n            .includes(filter.noteTitleFilter.toLowerCase()))\n    )\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onArchive(note) {\n    dispatch(toggleNote(note));\n  },\n  onRemove(note) {\n    dispatch(removeNote(note));\n  },\n  onUpdate(note) {\n    dispatch(updateNote(note));\n  },\n  onStar(note) {\n    dispatch(starNote(note));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NotesContainer);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Notes from '../components/Notes';\n\nimport {\n  toggleNote,\n  removeNote,\n  updateNote,\n  starNote\n} from '../actions/noteAction';\n\nconst NotesContainer = ({ notes, onRemove, onArchive, onUpdate, onStar }) => {\n  return (\n    <Notes\n      notes={notes}\n      onRemove={onRemove}\n      onArchive={onArchive}\n      onUpdate={onUpdate}\n      onStar={onStar}\n    />\n  );\n};\n\nconst mapStateToProps = ({ notes, filter }) => {\n  return {\n    notes: notes.filter(\n      note =>\n        note.isArchived &&\n        (note.title\n          .toLowerCase()\n          .includes(filter.noteTitleFilter.toLowerCase()) ||\n          note.body\n            .toLowerCase()\n            .includes(filter.noteTitleFilter.toLowerCase()))\n    )\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onArchive(note) {\n    dispatch(toggleNote(note));\n  },\n  onRemove(note) {\n    dispatch(removeNote(note));\n  },\n  onUpdate(note) {\n    dispatch(updateNote(note));\n  },\n  onStar(note) {\n    dispatch(starNote(note));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NotesContainer);\n","import React, { useRef, useEffect, useState } from 'react';\nimport autosize from 'autosize';\nimport ThemeContext from '../contexts/ThemeContext';\nimport {\n  DARK_THEME,\n  DARK_COLORS,\n  LIGHT_COLORS,\n  LIGHT_THEME\n} from '../constants/ThemeConstants';\nimport ColorPicker from './ColorPicker';\n\nconst NewNote = ({ isFocussed, setFocus, noteState, setNoteState, onSave }) => {\n  const contentInput = useRef(null);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [colorPickerVisibility, setColorPickerVisibility] = useState(false);\n  const [imageInputVisibility, setImageInputVisibility] = useState(false);\n\n  useEffect(() => {\n    if (contentInput && contentInput.current) {\n      contentInput.current.focus();\n      autosize(contentInput.current);\n    }\n  }, []);\n\n  const handleChange = e => {\n    setNoteState({\n      ...noteState,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleStar = () => {\n    setNoteState(noteState => {\n      return {\n        ...noteState,\n        isStarred: !noteState.isStarred\n      };\n    });\n  };\n\n  const handleArchive = () => {\n    setNoteState(noteState => {\n      return {\n        ...noteState,\n        isArchived: !noteState.isArchived\n      };\n    });\n  };\n\n  const handleBackgroundColor = (index, color) => {\n    setSelectedIndex(index);\n    setNoteState(noteState => {\n      return {\n        ...noteState,\n        backgroundColor: color\n      };\n    });\n  };\n\n  const handleAttachPicture = () => {\n    setImageInputVisibility(imageInputVisibility => !imageInputVisibility);\n  };\n\n  const handleClearImage = () => {\n    setImageInputVisibility(false);\n    setNoteState(noteState => {\n      return {\n        ...noteState,\n        image: ''\n      };\n    });\n  };\n\n  if (isFocussed) {\n    return (\n      <ThemeContext.Consumer>\n        {({ theme }) => (\n          <div\n            className=\"note-add\"\n            style={{\n              position: 'relative',\n              backgroundColor:\n                theme === DARK_THEME\n                  ? `${DARK_COLORS[selectedIndex]}`\n                  : `${LIGHT_COLORS[selectedIndex]}`\n            }}\n            onClick={e => e.stopPropagation()}\n          >\n            {colorPickerVisibility && (\n              <ColorPicker\n                colors={theme === DARK_THEME ? DARK_COLORS : LIGHT_COLORS}\n                selectedIndex={selectedIndex}\n                handleBackgroundColor={handleBackgroundColor}\n                setColorPickerVisibility={setColorPickerVisibility}\n                position={{ key: 'left', value: '16px' }}\n              />\n            )}\n            <div\n              className={\n                theme === LIGHT_THEME && selectedIndex === 0\n                  ? 'star-icon icon icon-light'\n                  : 'star-icon icon material-icon-white'\n              }\n              onClick={handleStar}\n            >\n              <i className=\"material-icons\">\n                {noteState.isStarred ? 'star' : 'star_border'}\n              </i>\n            </div>\n            <input\n              onChange={handleChange}\n              value={noteState.title}\n              className={\n                theme === LIGHT_THEME && selectedIndex === 0\n                  ? 'note-title-input note-title-input-light'\n                  : 'note-title-input'\n              }\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Title\"\n            />\n            <textarea\n              onChange={handleChange}\n              value={noteState.body}\n              name=\"body\"\n              ref={contentInput}\n              rows={1}\n              className={\n                theme === LIGHT_THEME && selectedIndex === 0\n                  ? 'note-content-input note-content-input-light'\n                  : 'note-content-input'\n              }\n              type=\"text\"\n              placeholder=\"Take a note...\"\n            ></textarea>\n            {imageInputVisibility && (\n              <input\n                onChange={handleChange}\n                value={noteState.image}\n                className={\n                  theme === LIGHT_THEME && selectedIndex === 0\n                    ? 'note-title-input note-title-input-light'\n                    : 'note-title-input'\n                }\n                type=\"text\"\n                name=\"image\"\n                placeholder=\"Paste your image url here\"\n              />\n            )}\n            {noteState.image !== '' && (\n              <div className=\"note-image-container\">\n                <div\n                  className={\n                    theme === DARK_THEME\n                      ? 'icon note-image-remove'\n                      : 'icon icon-light note-image-remove'\n                  }\n                  onClick={handleClearImage}\n                >\n                  <i className=\"material-icons\">clear</i>\n                </div>\n                <img\n                  className=\"note-image\"\n                  alt=\"invalid_img_url\"\n                  src={noteState.image}\n                />\n              </div>\n            )}\n            <div className=\"note-add-actions\">\n              <div style={{ display: 'flex' }}>\n                <div\n                  className={\n                    theme === LIGHT_THEME && selectedIndex === 0\n                      ? 'icon  icon-light'\n                      : 'icon material-icon-white'\n                  }\n                  onClick={handleArchive}\n                >\n                  <i\n                    className={\n                      noteState.isArchived\n                        ? 'material-icons'\n                        : 'material-icons-outlined'\n                    }\n                  >\n                    archive\n                  </i>\n                </div>\n                <div\n                  className={\n                    theme === LIGHT_THEME && selectedIndex === 0\n                      ? 'icon  icon-light'\n                      : 'icon material-icon-white'\n                  }\n                  onClick={handleAttachPicture}\n                >\n                  <i\n                    className={\n                      noteState.isArchived\n                        ? 'material-icons'\n                        : 'material-icons-outlined'\n                    }\n                  >\n                    add_photo_alternate\n                  </i>\n                </div>\n                <div\n                  className={\n                    theme === LIGHT_THEME && selectedIndex === 0\n                      ? 'icon  icon-light'\n                      : 'icon material-icon-white'\n                  }\n                  onMouseOver={() => setColorPickerVisibility(true)}\n                  onMouseOut={() => setColorPickerVisibility(false)}\n                >\n                  <i className=\"material-icons\">color_lens</i>\n                </div>\n              </div>\n              <div style={{ display: 'flex' }}>\n                <button\n                  className={\n                    theme === LIGHT_THEME && selectedIndex === 0\n                      ? 'note-btn note-btn-light'\n                      : 'note-btn'\n                  }\n                  onClick={() => {\n                    onSave();\n                    setSelectedIndex(0);\n                    setImageInputVisibility(false);\n                  }}\n                >\n                  Close\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </ThemeContext.Consumer>\n    );\n  } else {\n    return (\n      <ThemeContext.Consumer>\n        {({ theme }) => (\n          <div\n            style={{ display: 'flex' }}\n            className=\"note-add\"\n            onClick={e => e.stopPropagation()}\n          >\n            <div className=\"note-add-unfocussed\" onClick={() => setFocus(true)}>\n              Take a note\n            </div>\n            <div style={{ flex: '1', display: 'flex' }}>\n              <div\n                className={theme === DARK_THEME ? 'icon' : 'icon icon-light'}\n                onClick={() => {\n                  setFocus(true);\n                  setImageInputVisibility(true);\n                }}\n              >\n                <i className=\"material-icons\">add_photo_alternate</i>\n              </div>\n            </div>\n          </div>\n        )}\n      </ThemeContext.Consumer>\n    );\n  }\n};\n\nexport default NewNote;\n","import React, { useState } from 'react';\nimport './MainDisplay.css';\nimport NotesContainer from '../containers/NotesContainer';\nimport ArchivedNotesContainer from '../containers/ArchivedNotesContainer';\nimport NewNote from '../components/NewNote';\nimport { DEFAULT_STATE } from '../constants/DefaultStates';\n\nconst MainDisplay = ({ selctedIndex, addNewNote }) => {\n  const [isFocussed, setFocus] = useState(false);\n  const [noteState, setNoteState] = useState(DEFAULT_STATE);\n\n  const onSave = () => {\n    let {\n      title,\n      body,\n      isStarred,\n      isArchived,\n      backgroundColor,\n      image\n    } = noteState;\n    if (title !== '' || body !== '') {\n      addNewNote(title, body, image, backgroundColor, isStarred, isArchived);\n      setNoteState(DEFAULT_STATE);\n    }\n    setFocus(false);\n  };\n\n  const renderContainer = () => {\n    switch (selctedIndex) {\n      case 0:\n        return <NotesContainer />;\n      case 1:\n        return <ArchivedNotesContainer />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <main className=\"main\" onClick={onSave}>\n      {selctedIndex === 0 && (\n        <div className=\"note-add-container\">\n          <NewNote\n            isFocussed={isFocussed}\n            setFocus={setFocus}\n            noteState={noteState}\n            setNoteState={setNoteState}\n            onSave={onSave}\n          />\n        </div>\n      )}\n      <div className=\"notes-container\">{renderContainer()}</div>\n    </main>\n  );\n};\n\nexport default MainDisplay;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport MainDisplay from '../components/MainDisplay';\n\nimport { addNewNote } from '../actions/noteAction';\n\nconst MainDisplayContainer = ({ addNewNote, selctedIndex }) => {\n  return <MainDisplay addNewNote={addNewNote} selctedIndex={selctedIndex} />;\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators(\n    {\n      addNewNote\n    },\n    dispatch\n  );\n};\n\nexport default connect(null, mapDispatchToProps)(MainDisplayContainer);\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport NavBar from './NavBar';\nimport MainDisplayContainer from '../containers/MainDisplayContainer';\nimport ThemeContext from '../contexts/ThemeContext';\nimport { LIGHT_THEME, DARK_THEME } from '../constants/ThemeConstants';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isNavbarCollapased: window.innerWidth < 775 ? true : false,\n      selctedIndex: 0,\n      theme: DARK_THEME,\n      toggleTheme: this.toggleTheme\n    };\n  }\n\n  setNavbarCollapse = () =>\n    this.setState(({ isNavbarCollapased }) => {\n      return {\n        isNavbarCollapased: !isNavbarCollapased\n      };\n    });\n\n  setSelectedIndex = index => {\n    this.setState(({ isNavbarCollapased }) => ({\n      isNavbarCollapased:\n        window.innerWidth < 775 ? !isNavbarCollapased : isNavbarCollapased,\n      selctedIndex: index\n    }));\n  };\n\n  toggleTheme = () =>\n    this.setState(({ theme }) => ({\n      theme: theme === DARK_THEME ? LIGHT_THEME : DARK_THEME\n    }));\n\n  render() {\n    const { selctedIndex, isNavbarCollapased, theme } = this.state;\n    return (\n      <ThemeContext.Provider\n        value={{ theme: this.state.theme, toggleTheme: this.state.toggleTheme }}\n      >\n        <div\n          className={theme === DARK_THEME ? 'App App-dark' : 'App App-light'}\n        >\n          <Header setNavbarCollapse={this.setNavbarCollapse} />\n          <div style={{ backgroundColor: '#BBB', height: '1px' }}></div>\n          <div className=\"container\">\n            <NavBar\n              theme={theme}\n              selctedIndex={selctedIndex}\n              setSelectedIndex={this.setSelectedIndex}\n              isNavbarCollapased={isNavbarCollapased}\n            />\n            <MainDisplayContainer selctedIndex={selctedIndex} />\n          </div>\n        </div>\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport notes from './noteReducer';\nimport filter from './filterReducer';\n\nexport default combineReducers({ notes, filter });\n","import {\n  UPDATE_ALL_NOTES,\n  ADD_NEW_NOTE,\n  UPDATE_NOTE,\n  REMOVE_NOTE,\n  TOGGLE_NOTE,\n  UPDATE_ALL_AS_ARCHIVE,\n  UPDATE_ALL_AS_UNARCHIVE\n} from '../constants/ActionTypes';\n\nexport default (state = {}, action) => {\n  if (action.type === UPDATE_ALL_NOTES) {\n    return action.notes;\n  }\n\n  if (action.type === ADD_NEW_NOTE) {\n    const {\n      id,\n      isArchived,\n      title,\n      body,\n      image,\n      isStarred,\n      backgroundColor\n    } = action.note;\n    return [\n      ...state,\n      { id, isArchived, title, body, image, isStarred, backgroundColor }\n    ];\n  }\n\n  if (action.type === REMOVE_NOTE) {\n    return state.filter(note => note.id !== action.id);\n  }\n\n  if (action.type === UPDATE_NOTE || action.type === TOGGLE_NOTE) {\n    return state.map(note => {\n      if (note.id === action.note.id) return { ...action.note };\n      return note;\n    });\n  }\n\n  if (action.type === UPDATE_ALL_AS_ARCHIVE) {\n    return state.map(note => {\n      return { ...note, isArchived: true };\n    });\n  }\n\n  if (action.type === UPDATE_ALL_AS_UNARCHIVE) {\n    return state.map(note => {\n      return { ...note, isArchived: false };\n    });\n  }\n\n  return state;\n};\n","import { UPDATE_NOTE_TITLE_FILTER } from '../constants/ActionTypes';\n\nexport default (state = { noteTitleFilter: '' }, action) => {\n  if (action.type === UPDATE_NOTE_TITLE_FILTER) {\n    return { ...state, noteTitleFilter: action.text };\n  }\n\n  return state;\n};\n","const notes = [];\nconst filter = {\n  noteTitleFilter: ''\n};\n\nexport default {\n  notes,\n  filter\n};\n","import { compose, applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport reducers from '../reducers';\nimport initialState from './initialState';\n\nimport { getAllNotes } from '../actions/noteAction';\n\nconst middlewares = [thunk];\nconst enhancers = [];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  reducers,\n  initialState,\n  composeEnhancers(applyMiddleware(...middlewares), ...enhancers)\n);\n\nstore.dispatch(getAllNotes());\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}